testcase_name,network_name,op_name,stc_input_dtypes,stc_ori_inputs,other_compilation_params,other_runtime_params,stc_inputs,output_dtypes,stc_outputs,output_formats,dyn_inputs,dyn_input_dtypes,dyn_outputs,dyn_ori_inputs,dyn_input_formats,dyn_input_ori_formats,dyn_input_ranges,dyn_output_ranges
basic_lstm_cell_aftersmoke910b_ID0231_00001255,Tacotron,basic_lstm_cell,"('float16',)","((5, 32), (5, 32), (5, 32), (64, 128), (128,), None)","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","((2, 1, 16, 16), (2, 1, 16, 16), (2, 1, 16, 16), (4, 8, 16, 16), (128,), None)","('float16',)","((2, 1, 16, 16), (2, 1, 16, 16), (2, 1, 16, 16), (2, 1, 16, 16), (2, 1, 16, 16), (2, 1, 16, 16), (2, 1, 16, 16))","('FRACTAL_NZ',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, -1, -1), (-1,), None)","('float16',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16))","((-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1,), None)","('FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_ZN_LSTM', 'ND')","('ND', 'ND', 'ND', 'HWCN', 'ND')","(((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (1, None), (1, None)), ((1, None),), None)","(((1, None), (1, None), (16, 16), (16, 16)),)"
basic_lstm_cell_aftersmoke910b_ID0231_00001256,Tacotron,basic_lstm_cell,"('float16',)","((1, 1536), (1, 1024), (1, 1024), (2560, 4096), (4096,), None)","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","((96, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (160, 256, 16, 16), (4096,), None)","('float16',)","((64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16))","('FRACTAL_NZ',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, -1, -1), (-1,), None)","('float16',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16))","((-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1,), None)","('FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_ZN_LSTM', 'ND')","('ND', 'ND', 'ND', 'HWCN', 'ND')","(((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (1, None), (1, None)), ((1, None),), None)","(((1, None), (1, None), (16, 16), (16, 16)),)"
basic_lstm_cell_aftersmoke910b_ID0231_00001257,Tacotron,basic_lstm_cell,"('float16',)","((1, 512), (1, 256), (1, 256), (768, 1024), (1024,), None)","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","((32, 1, 16, 16), (16, 1, 16, 16), (16, 1, 16, 16), (48, 64, 16, 16), (1024,), None)","('float16',)","((16, 1, 16, 16), (16, 1, 16, 16), (16, 1, 16, 16), (16, 1, 16, 16), (16, 1, 16, 16), (16, 1, 16, 16), (16, 1, 16, 16))","('FRACTAL_NZ',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, -1, -1), (-1,), None)","('float16',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16))","((-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1,), None)","('FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_ZN_LSTM', 'ND')","('ND', 'ND', 'ND', 'HWCN', 'ND')","(((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (1, None), (1, None)), ((1, None),), None)","(((1, None), (1, None), (16, 16), (16, 16)),)"
basic_lstm_cell_aftersmoke910b_ID0231_00001258,Tacotron,basic_lstm_cell,"('float16',)","((1, 768), (1, 1024), (1, 1024), (1792, 4096), (4096,), None)","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","{'keep_prob': 1.0, 'forget_bias': 1.0, 'state_is_tuple': True, 'activation': 'tanh'}","((48, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (112, 256, 16, 16), (4096,), None)","('float16',)","((64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16), (64, 1, 16, 16))","('FRACTAL_NZ',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, -1, -1), (-1,), None)","('float16',)","((-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16), (-1, -1, 16, 16))","((-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1,), None)","('FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_NZ', 'FRACTAL_ZN_LSTM', 'ND')","('ND', 'ND', 'ND', 'HWCN', 'ND')","(((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (16, 16), (16, 16)), ((1, None), (1, None), (1, None), (1, None)), ((1, None),), None)","(((1, None), (1, None), (16, 16), (16, 16)),)"
