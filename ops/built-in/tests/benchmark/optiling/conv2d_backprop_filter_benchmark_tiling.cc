/**
 * Copyright 2022 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <benchmark/benchmark.h>
#include <nlohmann/json.hpp>

#include <fstream>
#include <iostream>
#include <vector>

#include "array_ops.h"
#include "graph/compute_graph.h"
#include "graph/graph.h"
#include "graph/utils/graph_utils.h"
#include "graph/utils/op_desc_utils.h"
#include "nn_calculation_ops.h"
#include "register/op_tiling_registry.h"

using namespace std;
using namespace ge;
using nlohmann::json;

namespace optiling {
bool Conv2DBpFilterTiling(const std::string &opType, const ge::Operator &opParas, const nlohmann::json &opCompileInfo,
                          utils::OpRunInfo &runInfo);
}

static void Conv2DBpFilterTilingBenchmark(benchmark::State &state, const char *compile_info) {
  std::string op_name = "Conv2DBackpropFilter";

  auto x_shape_vec = vector<int64_t>({8, 5, 56, 56});
  ge::Shape x_shape(x_shape_vec);
  ge::TensorDesc desc_x(x_shape, FORMAT_NCHW, DT_FLOAT16);
  desc_x.SetOriginShape(x_shape);
  desc_x.SetOriginFormat(FORMAT_NCHW);
  auto x = op::Data("x");
  x.update_input_desc_x(desc_x);
  x.update_output_desc_y(desc_x);

  auto filter_size_shape_vec = vector<int64_t>({257, 5, 3, 3});
  ge::Shape filter_size_shape = ge::Shape(filter_size_shape_vec);
  ge::TensorDesc desc_filter_size(filter_size_shape, FORMAT_NCHW, DT_FLOAT16);
  desc_filter_size.SetOriginShape(filter_size_shape);
  desc_filter_size.SetOriginFormat(FORMAT_NCHW);
  auto filter_size = op::Data("filter_size").set_attr_index(1);
  filter_size.update_input_desc_x(desc_filter_size);
  filter_size.update_output_desc_y(desc_filter_size);

  auto out_backprop_shape_vec = vector<int64_t>({8, 257, 56, 56});
  ge::Shape out_backprop_shape(out_backprop_shape_vec);
  ge::TensorDesc desc_out_backprop(out_backprop_shape, FORMAT_NCHW, DT_FLOAT16);
  desc_out_backprop.SetOriginShape(out_backprop_shape);
  desc_out_backprop.SetOriginFormat(FORMAT_NCHW);
  auto out_backprop = op::Data("out_backprop").set_attr_index(1);
  out_backprop.update_input_desc_x(desc_out_backprop);
  out_backprop.update_output_desc_y(desc_out_backprop);

  auto conv2dbackpropfilter = op::Conv2DBackpropFilter(op_name)
                                  .set_input_x(x)
                                  .set_input_filter_size(filter_size)
                                  .set_input_out_backprop(out_backprop)
                                  .set_attr_strides({1, 1, 1, 1})
                                  .set_attr_pads({-1, -1, -1, -1})
                                  .set_attr_dilations({1, 1, 1, 1})
                                  .set_attr_groups({1})
                                  .set_attr_data_format("NCHW");

  auto y_shape_vec = vector<int64_t>({257, 5, 3, 3});
  ge::Shape y_shape = ge::Shape(y_shape_vec);
  ge::TensorDesc output_desc_y(y_shape, ge::FORMAT_NCHW, ge::DT_FLOAT16);
  output_desc_y.SetOriginShape(y_shape);
  output_desc_y.SetOriginFormat(FORMAT_NCHW);

  conv2dbackpropfilter.update_input_desc_out_backprop(desc_out_backprop);
  conv2dbackpropfilter.update_input_desc_x(desc_x);
  conv2dbackpropfilter.update_input_desc_filter_size(desc_filter_size);
  conv2dbackpropfilter.update_output_desc_y(output_desc_y);

  optiling::utils::OpRunInfo runInfo;
  for (auto _ : state) {
    optiling::Conv2DBpFilterTiling(op_name, conv2dbackpropfilter, nlohmann::json::parse(compile_info), runInfo);
  }
}

static void Conv2DBpFilterTilingRepoSize100(benchmark::State &state) {
  const char *compile_info = R"({"_pattern": "Conv2d_backprop_filter", "push_status": 1, "tiling_type": "dynamic_tiling", "repo_seeds": {"10100": [8, 56, 56], "10101": [8, 56, 56], "10102": [8, 56, 56], "10103": [8, 56, 56], "10104": [8, 56, 56], "10105": [8, 56, 56], "10106": [8, 56, 56], "10107": [8, 56, 56], "10108": [8, 56, 56], "10109": [8, 56, 56], "10110": [8, 56, 56], "10111": [8, 56, 56], "10112": [8, 56, 56], "10113": [8, 56, 56], "10114": [8, 56, 56], "10115": [8, 56, 56], "10116": [8, 56, 56], "10117": [8, 56, 56], "10118": [8, 56, 56], "10119": [8, 56, 56], "10120": [8, 56, 56], "10121": [8, 56, 56], "10122": [8, 56, 56], "10123": [8, 56, 56], "10124": [8, 56, 56], "10125": [8, 56, 56], "10126": [8, 56, 56], "10127": [8, 56, 56], "10128": [8, 56, 56], "10129": [8, 56, 56], "10130": [8, 56, 56], "10131": [8, 56, 56], "10132": [8, 56, 56], "10133": [8, 56, 56], "10134": [8, 56, 56], "10135": [8, 56, 56], "10136": [8, 56, 56], "10137": [8, 56, 56], "10138": [8, 56, 56], "10139": [8, 56, 56], "10140": [8, 56, 56], "10141": [8, 56, 56], "10142": [8, 56, 56], "10143": [8, 56, 56], "10144": [8, 56, 56], "10145": [8, 56, 56], "10146": [8, 56, 56], "10147": [8, 56, 56], "10148": [8, 56, 56], "10149": [8, 56, 56], "10150": [8, 56, 56], "10151": [8, 56, 56], "10152": [8, 56, 56], "10153": [8, 56, 56], "10154": [8, 56, 56], "10155": [8, 56, 56], "10156": [8, 56, 56], "10157": [8, 56, 56], "10158": [8, 56, 56], "10159": [8, 56, 56], "10160": [8, 56, 56], "10161": [8, 56, 56], "10162": [8, 56, 56], "10163": [8, 56, 56], "10164": [8, 56, 56], "10165": [8, 56, 56], "10166": [8, 56, 56], "10167": [8, 56, 56], "10168": [8, 56, 56], "10169": [8, 56, 56], "10170": [8, 56, 56], "10171": [8, 56, 56], "10172": [8, 56, 56], "10173": [8, 56, 56], "10174": [8, 56, 56], "10175": [8, 56, 56], "10176": [8, 56, 56], "10177": [8, 56, 56], "10178": [8, 56, 56], "10179": [8, 56, 56], "10180": [8, 56, 56], "10181": [8, 56, 56], "10182": [8, 56, 56], "10183": [8, 56, 56], "10184": [8, 56, 56], "10185": [8, 56, 56], "10186": [8, 56, 56], "10187": [8, 56, 56], "10188": [8, 56, 56], "10189": [8, 56, 56], "10190": [8, 56, 56], "10191": [8, 56, 56], "10192": [8, 56, 56], "10193": [8, 56, 56], "10194": [8, 56, 56], "10195": [8, 56, 56], "10196": [8, 56, 56], "10197": [8, 56, 56], "10198": [8, 56, 56], "10199": [8, 56, 56]}, "repo_range": {"10100": [8, 8, 56, 56, 56, 56], "10101": [8, 8, 56, 56, 56, 56], "10102": [8, 8, 56, 56, 56, 56], "10103": [8, 8, 56, 56, 56, 56], "10104": [8, 8, 56, 56, 56, 56], "10105": [8, 8, 56, 56, 56, 56], "10106": [8, 8, 56, 56, 56, 56], "10107": [8, 8, 56, 56, 56, 56], "10108": [8, 8, 56, 56, 56, 56], "10109": [8, 8, 56, 56, 56, 56], "10110": [8, 8, 56, 56, 56, 56], "10111": [8, 8, 56, 56, 56, 56], "10112": [8, 8, 56, 56, 56, 56], "10113": [8, 8, 56, 56, 56, 56], "10114": [8, 8, 56, 56, 56, 56], "10115": [8, 8, 56, 56, 56, 56], "10116": [8, 8, 56, 56, 56, 56], "10117": [8, 8, 56, 56, 56, 56], "10118": [8, 8, 56, 56, 56, 56], "10119": [8, 8, 56, 56, 56, 56], "10120": [8, 8, 56, 56, 56, 56], "10121": [8, 8, 56, 56, 56, 56], "10122": [8, 8, 56, 56, 56, 56], "10123": [8, 8, 56, 56, 56, 56], "10124": [8, 8, 56, 56, 56, 56], "10125": [8, 8, 56, 56, 56, 56], "10126": [8, 8, 56, 56, 56, 56], "10127": [8, 8, 56, 56, 56, 56], "10128": [8, 8, 56, 56, 56, 56], "10129": [8, 8, 56, 56, 56, 56], "10130": [8, 8, 56, 56, 56, 56], "10131": [8, 8, 56, 56, 56, 56], "10132": [8, 8, 56, 56, 56, 56], "10133": [8, 8, 56, 56, 56, 56], "10134": [8, 8, 56, 56, 56, 56], "10135": [8, 8, 56, 56, 56, 56], "10136": [8, 8, 56, 56, 56, 56], "10137": [8, 8, 56, 56, 56, 56], "10138": [8, 8, 56, 56, 56, 56], "10139": [8, 8, 56, 56, 56, 56], "10140": [8, 8, 56, 56, 56, 56], "10141": [8, 8, 56, 56, 56, 56], "10142": [8, 8, 56, 56, 56, 56], "10143": [8, 8, 56, 56, 56, 56], "10144": [8, 8, 56, 56, 56, 56], "10145": [8, 8, 56, 56, 56, 56], "10146": [8, 8, 56, 56, 56, 56], "10147": [8, 8, 56, 56, 56, 56], "10148": [8, 8, 56, 56, 56, 56], "10149": [8, 8, 56, 56, 56, 56], "10150": [8, 8, 56, 56, 56, 56], "10151": [8, 8, 56, 56, 56, 56], "10152": [8, 8, 56, 56, 56, 56], "10153": [8, 8, 56, 56, 56, 56], "10154": [8, 8, 56, 56, 56, 56], "10155": [8, 8, 56, 56, 56, 56], "10156": [8, 8, 56, 56, 56, 56], "10157": [8, 8, 56, 56, 56, 56], "10158": [8, 8, 56, 56, 56, 56], "10159": [8, 8, 56, 56, 56, 56], "10160": [8, 8, 56, 56, 56, 56], "10161": [8, 8, 56, 56, 56, 56], "10162": [8, 8, 56, 56, 56, 56], "10163": [8, 8, 56, 56, 56, 56], "10164": [8, 8, 56, 56, 56, 56], "10165": [8, 8, 56, 56, 56, 56], "10166": [8, 8, 56, 56, 56, 56], "10167": [8, 8, 56, 56, 56, 56], "10168": [8, 8, 56, 56, 56, 56], "10169": [8, 8, 56, 56, 56, 56], "10170": [8, 8, 56, 56, 56, 56], "10171": [8, 8, 56, 56, 56, 56], "10172": [8, 8, 56, 56, 56, 56], "10173": [8, 8, 56, 56, 56, 56], "10174": [8, 8, 56, 56, 56, 56], "10175": [8, 8, 56, 56, 56, 56], "10176": [8, 8, 56, 56, 56, 56], "10177": [8, 8, 56, 56, 56, 56], "10178": [8, 8, 56, 56, 56, 56], "10179": [8, 8, 56, 56, 56, 56], "10180": [8, 8, 56, 56, 56, 56], "10181": [8, 8, 56, 56, 56, 56], "10182": [8, 8, 56, 56, 56, 56], "10183": [8, 8, 56, 56, 56, 56], "10184": [8, 8, 56, 56, 56, 56], "10185": [8, 8, 56, 56, 56, 56], "10186": [8, 8, 56, 56, 56, 56], "10187": [8, 8, 56, 56, 56, 56], "10188": [8, 8, 56, 56, 56, 56], "10189": [8, 8, 56, 56, 56, 56], "10190": [8, 8, 56, 56, 56, 56], "10191": [8, 8, 56, 56, 56, 56], "10192": [8, 8, 56, 56, 56, 56], "10193": [8, 8, 56, 56, 56, 56], "10194": [8, 8, 56, 56, 56, 56], "10195": [8, 8, 56, 56, 56, 56], "10196": [8, 8, 56, 56, 56, 56], "10197": [8, 8, 56, 56, 56, 56], "10198": [8, 8, 56, 56, 56, 56], "10199": [8, 8, 56, 56, 56, 56]}, "cost_range": {}, "block_dim": {"10100": 12, "10101": 2, "10102": 30, "10103": 14, "10104": 7, "10105": 18, "10106": 12, "10107": 9, "10108": 27, "10109": 23, "10110": 12, "10111": 29, "10112": 6, "10113": 5, "10114": 15, "10115": 28, "10116": 30, "10117": 14, "10118": 27, "10119": 25, "10120": 29, "10121": 5, "10122": 9, "10123": 32, "10124": 31, "10125": 10, "10126": 1, "10127": 12, "10128": 25, "10129": 31, "10130": 3, "10131": 23, "10132": 8, "10133": 5, "10134": 26, "10135": 5, "10136": 26, "10137": 30, "10138": 21, "10139": 29, "10140": 5, "10141": 31, "10142": 17, "10143": 32, "10144": 3, "10145": 29, "10146": 4, "10147": 17, "10148": 21, "10149": 16, "10150": 17, "10151": 6, "10152": 29, "10153": 20, "10154": 6, "10155": 1, "10156": 10, "10157": 7, "10158": 10, "10159": 7, "10160": 14, "10161": 23, "10162": 2, "10163": 12, "10164": 8, "10165": 11, "10166": 4, "10167": 31, "10168": 16, "10169": 30, "10170": 13, "10171": 9, "10172": 25, "10173": 3, "10174": 20, "10175": 19, "10176": 28, "10177": 9, "10178": 31, "10179": 21, "10180": 25, "10181": 5, "10182": 28, "10183": 28, "10184": 2, "10185": 30, "10186": 12, "10187": 14, "10188": 14, "10189": 15, "10190": 27, "10191": 30, "10192": 3, "10193": 30, "10194": 31, "10195": 20, "10196": 31, "10197": 7, "10198": 15, "10199": 27}, "correct_range_flag": false, "_vars": {"10000": ["batch", "fmap_h", "dedy_h", "fmap_w", "dedy_w"]}})";
  Conv2DBpFilterTilingBenchmark(state, compile_info);
}
BENCHMARK(Conv2DBpFilterTilingRepoSize100);

static void Conv2DBpFilterTilingCostSize100(benchmark::State &state) {
  const char *compile_info = R"({"_pattern": "Conv2d_backprop_filter", "push_status": 1, "tiling_type": "dynamic_tiling", "repo_seeds": {}, "repo_range": {}, "cost_range": {"10100": [6, 61, 51, 64, 27, 56], "10101": [32, 61, 6, 55, 20, 61], "10102": [10, 49, 29, 34, 28, 59], "10103": [31, 48, 20, 60, 19, 62], "10104": [1, 41, 14, 37, 36, 56], "10105": [3, 56, 1, 58, 2, 55], "10106": [6, 15, 1, 64, 21, 59], "10107": [41, 61, 1, 54, 19, 47], "10108": [20, 64, 26, 58, 7, 39], "10109": [18, 56, 33, 54, 9, 40], "10110": [3, 30, 4, 28, 27, 58], "10111": [21, 63, 1, 23, 3, 57], "10112": [19, 61, 5, 36, 19, 61], "10113": [1, 51, 50, 63, 1, 62], "10114": [2, 27, 39, 44, 17, 40], "10115": [1, 41, 34, 54, 20, 59], "10116": [3, 21, 27, 53, 43, 53], "10117": [18, 42, 1, 24, 7, 61], "10118": [17, 46, 41, 49, 5, 61], "10119": [17, 57, 13, 40, 1, 27], "10120": [23, 33, 15, 46, 17, 39], "10121": [3, 34, 5, 42, 25, 54], "10122": [10, 15, 9, 43, 15, 40], "10123": [21, 31, 4, 45, 8, 39], "10124": [9, 41, 21, 22, 1, 59], "10125": [6, 55, 32, 53, 58, 61], "10126": [9, 53, 4, 45, 3, 34], "10127": [5, 30, 43, 64, 52, 56], "10128": [14, 28, 3, 43, 13, 63], "10129": [9, 40, 19, 44, 11, 40], "10130": [22, 41, 11, 62, 2, 24], "10131": [17, 28, 9, 25, 37, 56], "10132": [3, 28, 31, 53, 9, 19], "10133": [1, 41, 7, 24, 45, 51], "10134": [33, 47, 2, 45, 2, 37], "10135": [6, 46, 17, 51, 16, 51], "10136": [19, 53, 25, 33, 3, 62], "10137": [22, 57, 47, 61, 45, 64], "10138": [11, 42, 2, 32, 19, 44], "10139": [18, 61, 23, 45, 3, 46], "10140": [4, 46, 6, 61, 55, 63], "10141": [25, 58, 24, 53, 1, 30], "10142": [1, 33, 26, 51, 7, 46], "10143": [2, 56, 11, 24, 40, 62], "10144": [48, 64, 12, 49, 11, 43], "10145": [32, 63, 18, 30, 18, 60], "10146": [39, 56, 17, 32, 38, 58], "10147": [2, 44, 6, 33, 35, 58], "10148": [7, 64, 1, 4, 2, 45], "10149": [25, 53, 13, 35, 19, 27], "10150": [2, 50, 1, 34, 10, 61], "10151": [26, 51, 30, 62, 2, 36], "10152": [35, 62, 18, 56, 1, 57], "10153": [26, 53, 33, 64, 1, 35], "10154": [52, 64, 14, 27, 7, 57], "10155": [50, 54, 3, 60, 22, 49], "10156": [8, 54, 4, 52, 16, 42], "10157": [1, 36, 43, 59, 42, 62], "10158": [21, 56, 8, 23, 19, 37], "10159": [18, 46, 4, 22, 2, 29], "10160": [12, 57, 7, 23, 34, 51], "10161": [13, 51, 7, 58, 16, 42], "10162": [2, 64, 17, 46, 22, 37], "10163": [10, 63, 9, 38, 25, 59], "10164": [62, 64, 2, 46, 20, 53], "10165": [27, 41, 2, 34, 29, 63], "10166": [13, 60, 5, 53, 7, 39], "10167": [4, 53, 19, 42, 50, 64], "10168": [36, 48, 22, 38, 13, 49], "10169": [8, 50, 7, 64, 3, 22], "10170": [13, 43, 19, 58, 17, 46], "10171": [1, 29, 13, 55, 9, 54], "10172": [55, 61, 63, 64, 22, 50], "10173": [15, 56, 8, 63, 25, 63], "10174": [2, 59, 12, 64, 16, 46], "10175": [3, 46, 29, 52, 18, 22], "10176": [6, 21, 51, 60, 1, 4], "10177": [13, 58, 9, 36, 11, 64], "10178": [19, 48, 36, 46, 26, 40], "10179": [2, 63, 27, 38, 44, 60], "10180": [2, 8, 3, 27, 30, 58], "10181": [3, 27, 17, 46, 7, 50], "10182": [20, 29, 34, 57, 10, 46], "10183": [2, 40, 4, 13, 5, 19], "10184": [20, 61, 38, 63, 3, 20], "10185": [6, 28, 12, 44, 8, 50], "10186": [6, 13, 4, 55, 18, 46], "10187": [35, 46, 29, 63, 19, 62], "10188": [33, 62, 6, 58, 9, 50], "10189": [14, 47, 19, 62, 2, 7], "10190": [35, 50, 32, 61, 11, 44], "10191": [5, 56, 20, 45, 38, 45], "10192": [13, 31, 17, 35, 3, 18], "10193": [60, 63, 4, 30, 23, 27], "10194": [37, 47, 26, 56, 1, 11], "10195": [32, 62, 18, 62, 22, 64], "10196": [39, 56, 4, 58, 5, 13], "10197": [1, 39, 19, 45, 24, 64], "10198": [10, 45, 13, 64, 2, 42], "10199": [11, 35, 4, 51, 29, 49]}, "block_dim": {"10100": 15, "10101": 28, "10102": 22, "10103": 3, "10104": 32, "10105": 2, "10106": 21, "10107": 7, "10108": 5, "10109": 21, "10110": 1, "10111": 9, "10112": 9, "10113": 4, "10114": 6, "10115": 8, "10116": 28, "10117": 29, "10118": 19, "10119": 4, "10120": 9, "10121": 24, "10122": 10, "10123": 20, "10124": 6, "10125": 23, "10126": 11, "10127": 25, "10128": 4, "10129": 2, "10130": 20, "10131": 15, "10132": 27, "10133": 32, "10134": 15, "10135": 10, "10136": 3, "10137": 11, "10138": 16, "10139": 22, "10140": 10, "10141": 13, "10142": 18, "10143": 24, "10144": 21, "10145": 22, "10146": 9, "10147": 4, "10148": 9, "10149": 8, "10150": 2, "10151": 8, "10152": 16, "10153": 12, "10154": 5, "10155": 7, "10156": 7, "10157": 9, "10158": 20, "10159": 17, "10160": 18, "10161": 6, "10162": 24, "10163": 24, "10164": 12, "10165": 26, "10166": 6, "10167": 27, "10168": 5, "10169": 25, "10170": 28, "10171": 10, "10172": 24, "10173": 2, "10174": 5, "10175": 20, "10176": 5, "10177": 19, "10178": 17, "10179": 15, "10180": 18, "10181": 14, "10182": 4, "10183": 8, "10184": 18, "10185": 32, "10186": 31, "10187": 27, "10188": 2, "10189": 29, "10190": 31, "10191": 23, "10192": 5, "10193": 29, "10194": 30, "10195": 20, "10196": 21, "10197": 8, "10198": 31, "10199": 17}, "correct_range_flag": false, "_vars": {"10000": ["batch", "fmap_h", "dedy_h", "fmap_w", "dedy_w"]}})";
  Conv2DBpFilterTilingBenchmark(state, compile_info);
}
BENCHMARK(Conv2DBpFilterTilingCostSize100);

static void Conv2DBpFilterTilingBinary(benchmark::State &state) {
  const char *compile_info = R"({"_pattern": "Conv2d_backprop_filter", "block_dim": {"CORE_NUM": 32}, "tiling_type": "binary", "max_core_num": 32})";
  Conv2DBpFilterTilingBenchmark(state, compile_info);
}
BENCHMARK(Conv2DBpFilterTilingBinary);