/**
 * Copyright 2022 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define protected public

#include <benchmark/benchmark.h>

#include <nlohmann/json.hpp>
#include <memory>
#include "array_ops.h"
#include "matrix_calculation_ops.h"
#include "graph/compute_graph.h"
#include "graph/graph.h"
#include "graph/utils/graph_utils.h"
#include "graph/utils/op_desc_utils.h"
#include "register/op_tiling_registry.h"
#include "cache_tiling.h"

using namespace std;
using nlohmann::json;
namespace optiling {
struct GemmCompileInfo {
  uint32_t workspace_num = 0;
  uint32_t ub_size = 0;
  BatchmatmulCompileParas params;
  string dynamic_mode;
  bool trans_a;
  bool trans_b;
  bool repo_seed_flag;
  map<string, vector<int64_t>> repo_seeds;
  map<string, vector<int64_t>> repo_range;
  bool repo_costmodel_flag;
  map<string, vector<int64_t>> cost_range;
  map<string, int64_t> block_dim;
};

bool GetGemmCompileValue(const json &compile_info, shared_ptr<GemmCompileInfo> &compile_value);
bool GEMMTiling(const string &op_type, const ge::Operator &op_paras, vector<shared_ptr<GemmCompileInfo>> &compile_data,
                optiling::utils::OpRunInfo &run_info);
}
static void BatchMatMulV2Tiling_repo_size_100(benchmark::State &state) {
  string op_type("BatchMatMulV2");
  ge::TensorDesc desc_x1(ge::Shape({32, 32, 128, 16, 16}), ge::FORMAT_ND, ge::DT_FLOAT16);
  desc_x1.SetOriginShape(ge::Shape({32, 2048, 512}));
  auto x1 = ge::op::Data("x1");
  x1.update_input_desc_x(desc_x1);
  x1.update_output_desc_y(desc_x1);

  ge::TensorDesc desc_x2(ge::Shape({32, 32, 16, 16}), ge::FORMAT_ND, ge::DT_FLOAT16);
  desc_x2.SetOriginShape(ge::Shape({512, 512}));
  auto x2 = ge::op::Data("x2");
  x2.update_input_desc_x(desc_x2);
  x2.update_output_desc_y(desc_x2);

  auto batch_matmul = ge::op::BatchMatMulV2("BatchMatMulV2").set_input_x1(x1).set_input_x2(x2);

  auto y_shape = vector<int64_t>({16, 16});
  ge::TensorDesc output_desc_y(ge::Shape({32, 32, 128, 16, 16}), ge::FORMAT_ND, ge::DT_FLOAT16);
  batch_matmul.update_output_desc_y(output_desc_y);

  // repo range size is 100 and all range match
  const char *json_str =
      R"({"_pattern": "MatMul", "format_a": "FRACTAL_NZ", "format_b": "FRACTAL_NZ", "dynamic_mode": "dynamic_mknb", "repo_seeds": {"20114": [128, 32, 32, 32], "10100": [127, 31, 31, 2063572729], "10101": [129, 33, 34, 1144288869], "10102": [130, 34, 33, 542458225], "10103": [128, 31, 33, 1845816735], "10104": [127, 32, 33, 1981846807], "10105": [130, 31, 30, 746798279], "10106": [127, 34, 34, 1744087121], "10107": [129, 31, 30, 1490833690], "10108": [129, 33, 34, 523931990], "10109": [128, 32, 33, 1386735851], "10110": [127, 30, 34, 1720623460], "10111": [130, 31, 34, 706584842], "10112": [126, 30, 30, 1742127526], "10113": [126, 33, 32, 149430593], "10114": [126, 34, 31, 2071435011], "10115": [126, 31, 33, 1169836599], "10116": [127, 34, 30, 882197734], "10117": [129, 34, 33, 602280550], "10118": [127, 33, 32, 1705556525], "10119": [127, 33, 30, 193847877], "10120": [128, 32, 30, 202210317], "10121": [126, 33, 30, 308067334], "10122": [130, 32, 33, 1656906679], "10123": [126, 31, 32, 686187631], "10124": [127, 30, 31, 1336327661], "10125": [126, 34, 33, 100259308], "10126": [127, 34, 30, 1843386269], "10127": [126, 32, 32, 2058851880], "10128": [127, 33, 31, 401625322], "10129": [129, 34, 32, 1621542372], "10130": [127, 34, 32, 710900013], "10131": [129, 32, 32, 623660082], "10132": [130, 30, 34, 357176923], "10133": [129, 32, 33, 1271905230], "10134": [130, 34, 33, 2001943059], "10135": [129, 30, 33, 441258622], "10136": [130, 34, 32, 143961714], "10137": [129, 31, 33, 728080679], "10138": [128, 32, 34, 611056784], "10139": [126, 34, 33, 799108847], "10140": [126, 30, 34, 241396480], "10141": [128, 30, 32, 1827602906], "10142": [127, 32, 31, 1821569058], "10143": [128, 33, 33, 847878945], "10144": [127, 32, 31, 1762025930], "10145": [129, 33, 31, 1882863521], "10146": [126, 34, 31, 748926908], "10147": [130, 30, 32, 1344792142], "10148": [128, 34, 30, 1887307841], "10149": [127, 30, 34, 143554792], "10150": [127, 34, 30, 1620380575], "10151": [129, 33, 30, 292341265], "10152": [128, 31, 34, 380562631], "10153": [130, 33, 34, 1811801600], "10154": [128, 30, 31, 797260499], "10155": [126, 30, 32, 970881597], "10156": [129, 32, 31, 126016409], "10157": [126, 32, 34, 429398585], "10158": [128, 33, 30, 262756364], "10159": [128, 32, 30, 705723264], "10160": [126, 33, 34, 1415960869], "10161": [128, 33, 34, 1619543393], "10162": [128, 32, 31, 1479174869], "10163": [130, 31, 32, 1513843528], "10164": [130, 31, 32, 1969498896], "10165": [129, 30, 33, 638336027], "10166": [129, 33, 31, 950728230], "10167": [129, 33, 31, 1920908173], "10168": [127, 32, 33, 1382291852], "10169": [126, 31, 32, 399806303], "10170": [126, 32, 31, 1586758758], "10171": [126, 33, 34, 537957027], "10172": [129, 33, 30, 680040042], "10173": [126, 30, 30, 565090238], "10174": [128, 30, 33, 778322092], "10175": [128, 34, 31, 2077763846], "10176": [130, 30, 33, 1318157113], "10177": [129, 34, 33, 392698721], "10178": [126, 34, 33, 1608404457], "10179": [126, 34, 34, 2035976165], "10180": [127, 34, 30, 1735794447], "10181": [127, 33, 32, 417612363], "10182": [130, 33, 31, 857453308], "10183": [129, 34, 33, 1984058242], "10184": [129, 30, 31, 1172728599], "10185": [129, 34, 32, 188008111], "10186": [128, 30, 30, 1619867194], "10187": [126, 33, 30, 1454015047], "10188": [127, 30, 30, 1158946212], "10189": [129, 33, 32, 653602690], "10190": [127, 31, 30, 2101302303], "10191": [126, 33, 31, 739948345], "10192": [128, 30, 33, 2129483113], "10193": [128, 34, 32, 1017629926], "10194": [126, 31, 30, 1761474765], "10195": [127, 33, 32, 1232751135], "10196": [126, 34, 30, 2047823352], "10197": [127, 33, 34, 810095617], "10198": [130, 32, 33, 9024439], "10199": [129, 31, 33, 714915630]}, "repo_range": {"20114": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10100": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10101": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10102": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10103": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10104": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10105": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10106": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10107": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10108": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10109": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10110": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10111": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10112": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10113": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10114": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10115": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10116": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10117": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10118": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10119": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10120": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10121": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10122": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10123": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10124": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10125": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10126": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10127": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10128": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10129": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10130": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10131": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10132": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10133": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10134": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10135": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10136": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10137": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10138": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10139": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10140": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10141": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10142": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10143": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10144": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10145": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10146": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10147": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10148": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10149": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10150": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10151": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10152": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10153": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10154": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10155": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10156": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10157": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10158": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10159": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10160": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10161": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10162": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10163": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10164": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10165": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10166": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10167": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10168": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10169": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10170": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10171": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10172": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10173": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10174": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10175": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10176": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10177": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10178": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10179": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10180": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10181": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10182": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10183": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10184": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10185": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10186": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10187": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10188": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10189": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10190": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10191": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10192": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10193": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10194": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10195": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10196": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10197": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10198": [126, 130, 30, 34, 30, 34, 32, 2147483647], "10199": [126, 130, 30, 34, 30, 34, 32, 2147483647]}, "attrs": {"transpose_a": false, "transpose_b": false}, "block_dim": {"10114": 8, "20114": 14, "10100": 27, "10101": 25, "10102": 19, "10103": 19, "10104": 12, "10105": 2, "10106": 31, "10107": 28, "10108": 1, "10109": 11, "10110": 21, "10111": 10, "10112": 7, "10113": 2, "10115": 11, "10116": 4, "10117": 25, "10118": 14, "10119": 28, "10120": 11, "10121": 3, "10122": 8, "10123": 12, "10124": 26, "10125": 5, "10126": 8, "10127": 23, "10128": 26, "10129": 9, "10130": 6, "10131": 31, "10132": 32, "10133": 1, "10134": 28, "10135": 7, "10136": 9, "10137": 7, "10138": 21, "10139": 19, "10140": 1, "10141": 6, "10142": 26, "10143": 20, "10144": 6, "10145": 22, "10146": 6, "10147": 23, "10148": 27, "10149": 20, "10150": 19, "10151": 1, "10152": 9, "10153": 10, "10154": 27, "10155": 31, "10156": 1, "10157": 4, "10158": 25, "10159": 30, "10160": 14, "10161": 27, "10162": 7, "10163": 25, "10164": 15, "10165": 18, "10166": 21, "10167": 28, "10168": 6, "10169": 20, "10170": 29, "10171": 19, "10172": 5, "10173": 1, "10174": 1, "10175": 20, "10176": 11, "10177": 32, "10178": 32, "10179": 1, "10180": 10, "10181": 31, "10182": 9, "10183": 3, "10184": 24, "10185": 17, "10186": 19, "10187": 8, "10188": 4, "10189": 2, "10190": 27, "10191": 11, "10192": 5, "10193": 20, "10194": 28, "10195": 18, "10196": 4, "10197": 1, "10198": 26, "10199": 4}, "correct_range_flag": null, "_vars": {"10114": ["m", "k", "n", "batch_single_core", "m_single_core", "n_single_core", "batch_dim", "n_dim", "m_dim", "m_al1", "n_bl1", "cub_n1", "m_l0", "k_l0", "n_ub_l0_time", "kal0_factor", "kbl0_factor", "kal1_factor", "kbl1_factor", "kal1_16", "kbl1_16", "kl1_times", "batch"]}, "_custom_vars": {"10114": ["m", "k", "n", "batch_single_core", "m_single_core", "n_single_core", "batch_dim", "n_dim", "m_dim", "m_al1", "n_bl1", "cub_n1", "m_l0", "k_l0", "n_ub_l0_time", "kal0_factor", "kbl0_factor", "kal1_factor", "kbl1_factor", "kal1_16", "kbl1_16", "kl1_times", "batch"]}, "_normal_vars": {"10114": []}, "_attr_vars": {"10114": []}})";

  std::unique_ptr<nlohmann::json> parsed_object_cinfo(new (std::nothrow)
                                                          nlohmann::json(nlohmann::json::parse(json_str)));
  vector<shared_ptr<optiling::GemmCompileInfo>> compile_info;
  if (parsed_object_cinfo->type() == json::value_t::object) {
    compile_info.resize(1);
    compile_info[0] = make_shared<optiling::GemmCompileInfo>();
    optiling::GetGemmCompileValue(*parsed_object_cinfo, compile_info.at(0));
  } else {
    compile_info.resize(parsed_object_cinfo->size());
    for (size_t i = 0; i < parsed_object_cinfo->size(); i++) {
      compile_info[i] = make_shared<optiling::GemmCompileInfo>();
      optiling::GetGemmCompileValue((*parsed_object_cinfo)[i], compile_info.at(i));
    }
  }

  optiling::utils::OpRunInfo run_info;
  for (auto _ : state) {
    optiling::GEMMTiling(op_type, batch_matmul, compile_info, run_info);
  }
}
BENCHMARK(BatchMatMulV2Tiling_repo_size_100);
