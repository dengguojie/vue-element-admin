/*
* Copyright (c) Huawei Technologies Co., Ltd. 2017-2018. All rights reserved.
* Description: generated by MindStudio
* Author: Huawei
* Create: 2017-06-06
*/

#include "proto/caffe/caffe.pb.h"
#include "register/register.h"
#include "op_log.h"

using namespace ge;
namespace domi
{
// Parse the parameters from caffe model, and pass them to the inner model.
Status ParseParamsProposal(const Message* op_origin, ge::Operator& op_dest) {
    OP_LOGI("Proposal", "enter into ParseParamsProposal ------begin!!");
    // trans op_src to op_dest
    const caffe::LayerParameter* layer = \
      dynamic_cast<const caffe::LayerParameter*>(op_origin);

    // Ckeck operator parameter's validity
    if (nullptr == layer)
    {
        OP_LOGE("Proposal", "Dynamic cast op_src to LayerParameter failed.");
        return FAILED;
    }

    // get layer
    const caffe::ProposalParameter& param = layer->proposal_param();

    if (param.has_feat_stride()) {
        op_dest.SetAttr("feat_stride", param.feat_stride());
    }

    if (param.has_base_size()) {
        op_dest.SetAttr("base_size", param.base_size());
    }

    if (param.has_min_size()) {
        op_dest.SetAttr("min_size", param.min_size());
    }

    if (param.ratio_size() > 0) {
        std::vector<float> v_ratio;
        for (int32_t i = 0; i < param.ratio_size(); i++) {
            v_ratio.push_back((param.ratio(i)));
        }
        op_dest.SetAttr("ratio", v_ratio);
    }

    if (param.scale_size() > 0) {
        std::vector<float> v_scale;
        for (int32_t i = 0; i < param.scale_size(); i++) {
            v_scale.push_back((param.scale(i)));
        }
        op_dest.SetAttr("scale", v_scale);
    }

    if (param.has_pre_nms_topn()) {
        op_dest.SetAttr("pre_nms_topn", param.pre_nms_topn());
    }
    if (param.has_post_nms_topn()) {
        op_dest.SetAttr("post_nms_topn", param.post_nms_topn());
    }
    if (param.has_iou_threshold()) {
        op_dest.SetAttr("iou_threshold", param.iou_threshold());
    }

    if (param.has_output_actual_rois_num()) {
        op_dest.SetAttr("output_actual_rois_num", param.output_actual_rois_num());
    }
    OP_LOGI("Proposal", "ParseParamsProposal ------end!!");

    return SUCCESS;
}

 /**
* Register the op plugin
* REGISTER_CUSTOM_OP:    Operator type name in om model, can be any but not duplicate with existence. case sensitive
* FrameworkType:       Enum type, only support CAFFE
* OriginOpType:        name of the operator type name in CAFFE
* ParseParamsFn:      Op parameters parse function
* InferShapeAndTypeFn: Set output description and datatype function
* TEBinBuildFn:    Class name of op parser
* ImplyType:           Instantiation type, TVM
*/
REGISTER_CUSTOM_OP("Proposal")
    .FrameworkType(CAFFE)
    .OriginOpType("Proposal")
    .ParseParamsFn(ParseParamsProposal)
    .ImplyType(ImplyType::TVM);
}

