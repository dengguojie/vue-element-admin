# source file:python/tbe/dsl/api.py

def ceil(raw_tensor):

def floor(raw_tensor):

def round(raw_tensor):

def trunc(raw_tensor):

def round_half_up(raw_tensor):

def cast_to(data, dtype, f1628IntegerFlag=True):

def vadd(lhs, rhs):

def vsub(lhs, rhs):

def vmul(lhs, rhs):

def vdiv(lhs, rhs):

def vrec(raw_tensor, impl_mode="high_performance"):

def vmod(lhs, rhs):

def vmax(lhs, rhs):

def vmin(lhs, rhs):

def vlog(raw_tensor, impl_mode="high_performance"):

def vexp(raw_tensor):

def vabs(raw_tensor):

def vsqrt(raw_tensor, impl_mode="high_performance"):

def vrsqrt(raw_tensor, impl_mode="high_performance"):

def vnot(raw_tensor):

def vor(lhs, rhs):

def vand(lhs, rhs):

def vlogic(lhs, rhs=None, operation='logic_and'):

def vadds(raw_tensor, scalar):

def vmuls(raw_tensor, scalar):

def vmaxs(raw_tensor, scalar):

def vmins(raw_tensor, scalar):

def vaxpy(lhs, rhs, scalar):

def vmla(tensor_0, tensor_1, tensor_2):

def vmadd(tensor_0, tensor_1, tensor_2):

def vcmp(lhs, rhs, operation='lt', mode='bool'):

def vsel(condition, lhs, rhs):

def vcmpsel(lhs, rhs=None, operation='lt', slhs=None, srhs=None):

def vmaddrelu(tensor_0, tensor_1, tensor_2):

def vaddrelu(lhs, rhs):

def vsubrelu(lhs, rhs):

def vrelu(raw_tensor):

def vlrelu(raw_tensor, alpha=0):

def clip(data, max_value, min_value):

def broadcast(var, shape, output_dtype=None):

def reduce_sum(raw_tensor, axis, keepdims=False):

def reduce_min(raw_tensor, axis, keepdims=False, impl_mode="high_performance"):

def reduce_max(raw_tensor, axis, keepdims=False, impl_mode="high_performance"):

def reduce_prod(raw_tensor, axis, keepdims=False):

def split(data, split_dim, size_splits):

def concat(raw_tensors, axis):

def inplace_add(lhs, inplace_ids, rhs):

def inplace_sub(lhs, inplace_ids, rhs):

def inplace_update(lhs, inplace_ids, rhs):

def pooling2d(tensor_in, window, stride, pooling_mode, padding_mode="SAME", pad=(0, 0, 0, 0), dilation=(1, 1), data_mode=1, ceil_mode=0, fusion_params=None, impl_mode="high_performance"):

def pooling3d(tensor_in, window, stride, padding_mode="SAME", pads=(0, 0, 0, 0, 0, 0), pooling_mode="MAX", dilation=(1, 1, 1), ceil_mode=0):

def max_pooling3d_grad_grad(orig_input, orig_output, grad_grad, assist_tensor, ksize, strides, pads=(0, 0, 0, 0, 0, 0), data_format="NDHWC", padding="SAME"):

def auto_schedule(outs, option=None):

def build(sch, config_map=None):

def classify(ins: list, mode: str, extra_params: Optional[Dict[str, Any]] = None):

def var(name, bound=None, dtype="int32", addition=None):

def var_attr(name, bound=None, dtype="int32", addition=None):

def add_build_arg(key, value):

def add_exclude_bound_var(var_):

def compute(_operator=None):

def schedule(_compute=None):
