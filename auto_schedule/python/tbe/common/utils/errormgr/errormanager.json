[
    {
        "errCode": "E50000",
        "errMessage": "The op [%s] missing [%s] parameter",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50001",
        "errMessage": "The  length of input [%s] of [%s] op needs to be %s, but the length is [%s]",
        "argList": "param,op_name,expected_length, length"
    },
    {
        "errCode": "E50002",
        "errMessage": "The  format of input [%s] of [%s] op needs to be [%s], but incoming format is [%s]",
        "argList": "param,op_name,expected_format_list,format"
    },
    {
        "errCode": "E50003",
        "errMessage": "The data type of input [%s] of [%s] op needs to be [%s], but incoming data type is [%s]",
        "argList": "param,op_name,expected_data_type_list,data_type"
    },
    {
        "errCode": "E50004",
        "errMessage": "1.The op [%s] input [%s] data type is [%s], but input [%s] data type is [%s], They must meet the rule [%s]",
        "argList": "op_name,param1,param1_data_type,param2,param2_data_type,rule"
    },
    {
        "errCode": "E50009",
        "errMessage": "1.The op [%s] has rule: [%s], but input [%s] shape is [%s]",
        "argList": "op_name, rule_desc,param_name, param_shape"
    },
    {
        "errCode": "E50012",
        "errMessage": "The [%s] op has rule: %s, but [%s] is [%s]",
        "argList": "op_name,rule_desc,param_name, param_value"
    },
    {
        "errCode": "E50029",
        "errMessage": "The op[%s] input parameter[%s] should be [%s], actual the input is [%s]",
        "argList": "op_name,param_name,expected_value,input_value"
    },
    {
        "errCode": "E50030",
        "errMessage": "The op[%s] required input parameter[%s] must exist.",
        "argList": "op_name,param_name"
    },
    {
        "errCode": "E50031",
        "errMessage": "In op[%s], the [%s] of [%s] and [%s] must be same, actual the [%s] of [%s] is [%s] and the [%s] of [%s] is [%s]",
        "argList": "op_name,attr_name,param1_name,param2_name,attr_name,param1_name,param1_value,attr_name,param2_name,param2_value"
    },
    {
        "errCode": "E50032",
        "errMessage": "When dtype of a is [%s], the op[%s] out dtype must in [%s], actual out dtype is [%s]",
        "argList": "a_dtype,op_name,expected_dtype_list,out_dtype"
    },
    {
        "errCode": "E50033",
        "errMessage": "The format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "argList": "param_name,op_name,expected_format_list,format"
    },
    {
        "errCode": "E50034",
        "errMessage": "The dtype of [%s] of op[%s] must in [%s], actual dtype is [%s]",
        "argList": "param_name,op_name,expected_dtype_list,dtype"
    },
    {
        "errCode": "E50035",
        "errMessage": "In op[%s], the dim of [%s] must be [%s], actual input is [%s]",
        "argList": "op_name,param_name,expected_length,length"
    },
    {
        "errCode": "E50036",
        "errMessage": "When the shape of a is [%s] and the shape of b is [%s], the shape of c of op [%s] must be [%s], actual input is [%s]",
        "argList": "a_shape,b_shape,op_name, expected_shape,shape"
    },
    {
        "errCode": "E50037",
        "errMessage": "The format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "argList": "param_name,op_name, expected_format_list,format"
    },
    {
        "errCode": "E50038",
        "errMessage": "In op [%s], the 1d value of shape a should be equal to 0d value of shape b, actual input are [%s] and [%s]",
        "argList": "op_name,a_1d,b_0d"
    },
    {
        "errCode": "E50039",
        "errMessage": "In op[%s], the channel of x should be equal to  filter's, actual input are [%s] and [%s]",
        "argList": "op_name,channel_of_x,channel_of_filter"
    },
    {
        "errCode": "E50040",
        "errMessage": "In op[%s], the [%s] must in range [%s], actual is [%s]",
        "argList": "op_name,range,attr_name,value"
    },
    {
        "errCode": "E50041",
        "errMessage": "In op[%s], the depth of feature map after padding can not be less than shape_filter's, actual are [%s] and [%s]",
        "argList": "op_name,depth_of_x,depth_of_filter"
    },
    {
        "errCode": "E50042",
        "errMessage": "In op[%s], the depth of pad can not be less than shape_filter's, actual are [%s] and [%s]",
        "argList": "op_name,depth_of_pad,depth_of_filter"
    },
    {
        "errCode": "E50043",
        "errMessage": "In op[%s], x H(after pad) must >= filter H, actual are [%s] and [%s]",
        "argList": "op_name,h_of_x,h_of_filter"
    },
    {
        "errCode": "E50044",
        "errMessage": "In op[%s], x W(after pad) must >= filter W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_x,w_of_filter"
    },
    {
        "errCode": "E50045",
        "errMessage": "In op[%s],filter H must > Pad H, actual are [%s] and [%s]",
        "argList": "op_name,h_of_filter,h_of_pad"
    },
    {
        "errCode": "E50046",
        "errMessage": "In op[%s],filter W must > Pad W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_filter,w_of_pad"
    },
    {
        "errCode": "E50047",
        "errMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_x,w_of_filter"
    },
    {
        "errCode": "E50048",
        "errMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_x,w_of_stride"
    },
    {
        "errCode": "E50049",
        "errMessage": "In op[%s], [%s] exceed 64 bit limitations",
        "argList": "op_name,attr_name"
    },
    {
        "errCode": "E50050",
        "errMessage": "In op [%s], only support pads model [%s], actual is [%s]",
        "argList": "op_name,expected_pad_mode,actual_pad_mode"
    },
    {
        "errCode": "E50051",
        "errMessage": "In op[%s], Invalid input size due to large kernel size and stride",
        "argList": "op_name"
    },
    {
        "errCode": "E50052",
        "errMessage": "In op[%s], Dilations in the batch and depth dimensions must be 1,actual are [%s] and [%s].",
        "argList": "op_name,dilation_n,dilation_c"
    },
    {
        "errCode": "E50053",
        "errMessage": "In op[%s], Shape error : The compute result of H under convolution rule cannot match",
        "argList": "op_name"
    },
    {
        "errCode": "E50054",
        "errMessage": "In op[%s], Shape error : The compute result of W under convolution rule cannot match",
        "argList": "op_name"
    },
    {
        "errCode": "E50055",
        "errMessage": "In op[%s], Input is too large, the minimum tiling may exceed L1_Buffer",
        "argList": "op_name"
    },
    {
        "errCode": "E50056",
        "errMessage": "In V200 op[%s],dilation_h and dilation_w must be 1,actual are [%s] and  [%s]",
        "argList": "op_name,dilation_h,dilation_w"
    },
    {
        "errCode": "E50057",
        "errMessage": "In op [%s], set either [%s] or [%s], not both",
        "argList": "op_name,param1_name,param2_name"
    },
    {
        "errCode": "E50058",
        "errMessage": "In op [%s], [%s]",
        "argList": "op_name,description"
    },
    {
        "errCode": "E50059",
        "errMessage": "In op[%s], x channel should be equal to filter channel*groups, x shape is: [%s], filter shape is: [%s], groups is: [%s]",
        "argList": "op_name,x_shape,filter_shape,groups"
    },
    {
        "errCode": "E50060",
        "errMessage": "In op [%s], [%s]",
        "argList": "op_name,description"
    },
    {
        "errCode": "E50061",
        "errMessage": "The op [%s], [%s] is unsupported",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50062",
        "errMessage": "The op [%s], add [%s] to [%s] fail.",
        "argList": "op_name, param_name1, param_name2"
    },
    {
        "errCode": "E50063",
        "errMessage": "In op[%s], [%s] is not equal to [%s].",
        "argList": "op_name, param_name1, param_name2"
    },
    {
        "errCode": "E50064",
        "errMessage": "The op [%s], fail to [%s] between [%s].",
        "argList": "op_name, param_name1, param_name2"
    },
    {
        "errCode": "E50065",
        "errMessage": "The op [%s], fail to [%s] of [%s].",
        "argList": "op_name, param_name1, param_name2"
    },
    {
        "errCode": "E50066",
        "errMessage": "The op [%s], new [%s] not success.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50067",
        "errMessage": "The op [%s], removing [%s] is failed.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50068",
        "errMessage": "The op [%s], adding [%s] for [%s] is failed.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50069",
        "errMessage": "The op [%s], [%s] is null.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50070",
        "errMessage": "The op [%s], [%s] is not success.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50071",
        "errMessage": "The op [%s], [%s] is greater than [%s].",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50072",
        "errMessage": "The op [%s], add [%s] failed.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50073",
        "errMessage": "The op [%s], [%s] is only support [%s].",
        "argList": "op_name, param_name1, param_name2"
    },
    {
        "errCode": "E50074",
        "errMessage": "The op [%s], [%s] has an incorrected [%s].",
        "argList": "op_name, param_name1, param_name2"
    },
    {
        "errCode": "E50075",
        "errMessage": "The op [%s], [%s] is not [%s].",
        "argList": "op_name, param_name1, param_name2"
    },
    {
        "errCode": "E50076",
        "errMessage": "The op [%s], [%s] is Invalid.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50077",
        "errMessage": "The op [%s], [%s] failed.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50078",
        "errMessage": "The op [%s], remove [%s] failed.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50079",
        "errMessage": "The op [%s], update [%s] failed.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50080",
        "errMessage": "The op [%s], get [%s] failed.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E50081",
        "errMessage": "The op [%s], [%s] is incorrected.",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E60000",
        "errMessage": "The op[%s] input parameter[%s] should be [%s], actual the input is [%s]",
        "argList": "op_name,param_name,expected_value,input_value"
    },
    {
        "errCode": "E60001",
        "errMessage": "The op[%s] required input parameter[%s] must exist.",
        "argList": "op_name,param_name"
    },
    {
        "errCode": "E60002",
        "errMessage": "In op[%s], the [%s] of [%s] and [%s] must be same, actual the [%s] of [%s] is [%s] and the [%s] of [%s] is [%s]",
        "argList": "op_name,attr_name,param1_name,param2_name,attr_name,param1_name,param1_value,attr_name,param2_name,param2_value"
    },
    {
        "errCode": "E60003",
        "errMessage": "When dtype of a is [%s], the op[%s] out dtype must in [%s], actual out dtype is [%s]",
        "argList": "a_dtype,op_name,expected_dtype_list,out_dtype"
    },
    {
        "errCode": "E60004",
        "errMessage": "The format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "argList": "param_name,op_name, expected_format_list,format"
    },
    {
        "errCode": "E60005",
        "errMessage": "The dtype of [%s] of op[%s] must in [%s], actual dtype is [%s]",
        "argList": "param_name,op_name,expected_dtype_list,dtype"
    },
    {
        "errCode": "E60006",
        "errMessage": "In op[%s], the dim of [%s] must be [%s], actual input is [%s]",
        "argList": "op_name,param_name,expected_length,length"
    },
    {
        "errCode": "E60007",
        "errMessage": "When the shape of a is [%s] and the shape of b is [%s], the shape of c of op [%s] must be [%s], actual input is [%s]",
        "argList": "a_shape,b_shape,op_name,expected_shape,shape"
    },
    {
        "errCode": "E60008",
        "errMessage": "The original format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "argList": "param_name,op_name,expected_format_list,format"
    },
    {
        "errCode": "E60009",
        "errMessage": "In op [%s], the 1d value of shape a should be equal to 0d value of shape b, actual input are [%s] and [%s]",
        "argList": "op_name,a_1d,b_0d"
    },
    {
        "errCode": "E60010",
        "errMessage": "In op[%s], the channel of a should be equal to  filter's, actual input are [%s] and [%s]",
        "argList": "op_name,channel_of_x,channel_of_filter"
    },
    {
        "errCode": "E60011",
        "errMessage": "In op[%s], the [%s] must in range [%s], actual is [%s]",
        "argList": "op_name,attr_name,range,value"
    },
    {
        "errCode": "E60012",
        "errMessage": "In op[%s], the depth of feature map after padding can not be less than shape_filter's, actual are [%s] and [%s]",
        "argList": "op_name,depth_of_x,depth_of_filter"
    },
    {
        "errCode": "E60013",
        "errMessage": "In op[%s], the depth of pad can not be larger than shape_filter's, actual are [%s] and [%s]",
        "argList": "op_name,depth_of_pad,depth_of_filter"
    },
    {
        "errCode": "E60014",
        "errMessage": "In op[%s], x H(after pad) must >= filter H, actual are [%s] and [%s]",
        "argList": "op_name,h_of_x,h_of_filter"
    },
    {
        "errCode": "E60015",
        "errMessage": "In op[%s], x W(after pad) must >= filter W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_x,w_of_filter"
    },
    {
        "errCode": "E60016",
        "errMessage": "In op[%s],filter H must > Pad H, actual are [%s] and [%s]",
        "argList": "op_name,h_of_filter,h_of_pad"
    },
    {
        "errCode": "E60017",
        "errMessage": "In op[%s],filter W must > Pad W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_filter,w_of_pad"
    },
    {
        "errCode": "E60018",
        "errMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_x,w_of_filter"
    },
    {
        "errCode": "E60019",
        "errMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "argList": "op_name,w_of_x,w_of_stride"
    },
    {
        "errCode": "E60020",
        "errMessage": "In op[%s], [%s] exceed 64 bit limitations",
        "argList": "op_name,attr_name"
    },
    {
        "errCode": "E60021",
        "errMessage": "In op [%s], only support pads model [%s], actual is [%s]",
        "argList": "op_name,expected_pad_mode,actual_pad_mode"
    },
    {
        "errCode": "E60022",
        "errMessage": "In op[%s], Invalid input size due to large kernel size and stride",
        "argList": "op_name"
    },
    {
        "errCode": "E60023",
        "errMessage": "In op[%s], Dilations in the batch and depth dimensions must be 1,actual are [%s] and [%s].",
        "argList": "op_name,dilation_n,dilation_c"
    },
    {
        "errCode": "E60024",
        "errMessage": "In op[%s], Shape error : The compute result of H under convolution rule cannot match",
        "argList": "op_name"
    },
    {
        "errCode": "E60025",
        "errMessage": "In op[%s], Shape error : The compute result of W under convolution rule cannot match",
        "argList": "op_name"
    },
    {
        "errCode": "E60026",
        "errMessage": "In op[%s], Input is too large, the minimum tiling may exceed L1_Buffer",
        "argList": "op_name"
    },
    {
        "errCode": "E60027",
        "errMessage": "In V200 op[%s],dilation_h and dilation_w must be 1,actual are [%s] and  [%s]",
        "argList": "op_name,dilation_h,dilation_w"
    },
    {
        "errCode": "E60036",
        "errMessage": "In op[%s], quant model only surport scale == 1 and sqrt == 0, but scale is [%s], sqrt is [%s]",
        "argList": "op_name,scale_value,sqrt_mode"
    },
    {
        "errCode": "E60037",
        "errMessage": "In op[%s], the type of [%s] should be in [%s], actual is [%s]",
        "argList": "op_name,param_name,type_list,type"
    },
    {
        "errCode": "E60038",
        "errMessage": "In op[%s], [%s]",
        "argList": "op_name,desc"
    },
    {
        "errCode": "E60039",
        "errMessage": "In op[%s], the [%s] of [%s] should be [%s] than [%s], actual is [%s]",
        "argList": "op_name,attr_name,param_name,comparator,expected_value,input_value"
    },
    {
        "errCode": "E60040",
        "errMessage": "The op[%s] [%s] requires attribute [%s]",
        "argList": "op_name,param_name,attr_name"
    },
    {
        "errCode": "E60101",
        "errMessage": "In op[%s], the last 2 dim of [%s] should be [%s], actual are [%s] ",
        "argList": "op_name,param_name,expected_two_dims,actual_two_dim"
    },
    {
        "errCode": "E60102",
        "errMessage": "When the shape of a is [%s] and the shape of b is [%s], the first 2 dims of c of op[%s] must be [%s], actual input is [%s]",
        "argList": "a_shape,b_shape,op_name,expected_first_two_dims,two_dim"
    },
    {
        "errCode": "E60103",
        "errMessage": "In op[%s], block_in of a should be [%s], actual input is [%s]",
        "argList": "op_name,expected_value,value"
    },
    {
        "errCode": "E60104",
        "errMessage": "In op[%s], block_reduce of a should be [%s], actual input is [%s]",
        "argList": "op_name,expected_value,value"
    },
    {
        "errCode": "E60105",
        "errMessage": "In op[%s], block_out of b should be [%s], actual input is [%s]",
        "argList": "op_name,expected_value,value"
    },
    {
        "errCode": "E60106",
        "errMessage": "In op[%s], block_reduce of b should be [%s], actual input is [%s]",
        "argList": "op_name,expected_value,value"
    },
    {
        "errCode": "E60107",
        "errMessage": "In op[%s], [%s] should be 4d list",
        "argList": "op_name,param_name"
    },
    {
        "errCode": "E60108",
        "errMessage": "In op[%s], [%s]",
        "argList": "op_name,reason"
    },
    {
        "errCode": "E60109",
        "errMessage": "In op[%s], input_memory_type should be 0 or 2, actual is [%s]",
        "argList": "op_name,input_memory_type"
    },
    {
        "errCode": "E60110",
        "errMessage": "In op[%s], output_memory_type should be 0 or 2, actual [%s]",
        "argList": "op_name,output_memory_type"
    },
    {
        "errCode": "E60111",
        "errMessage": "In op[%s], slice_offset is valid, actual is [%s]",
        "argList": "op_name,slice_offset"
    },
    {
        "errCode": "E60112",
        "errMessage": "In op[%s], valid_shape is valid, actual valid_shape is [%s] and shape_in is [%s]",
        "argList": "op_name,valid_shape,shape_in"
    },
    {
        "errCode": "E60113",
        "errMessage": "When dtype of b is int8, the op[%s]'s parameter[transpose_b] value must be False.",
        "argList": "op_name"
    },
    {
        "errCode": "E60114",
        "errMessage": "In op[%s], [%s],actual is [%s]",
        "argList": "op_name,reason,value"
    },
    {
        "errCode": "E60028",
        "errMessage": "The op [%s] input parameter [%s] should be [%s] type, but the type you enter is [%s]",
        "argList": "opname,param_name, optype,optype"
    },
    {
        "errCode": "E60029",
        "errMessage": "The op [%s] [%s] input does not contain the [%s] key",
        "argList": "op_name,param_name, key"
    },
    {
        "errCode": "E60030",
        "errMessage": "The  length of input [%s] of [%s] op needs to be [%s],but the length is [%s]",
        "argList": "param_name, op_name, expected_length, length"
    },
    {
        "errCode": "E60031",
        "errMessage": "The  format of input [%s] of [%s] op needs to be [%s], but the format you enter is [%s]",
        "argList": "param_name,op_name,expeted_format_list,format"
    },
    {
        "errCode": "E60032",
        "errMessage": "The input[%s] data type of the op[%s] is [%s], but the data type you enter is [%s]",
        "argList": "param_name, op_name, expected_data_type_list,data_type"
    },
    {
        "errCode": "E60033",
        "errMessage": "The op [%s] has rule: %s, but [%s] is [%s]",
        "argList": "op_name, rule_desc, param_name,param_value"
    },
    {
        "errCode": "E60034",
        "errMessage": "The op [%s]'s kernel name[%s] is invalid, it can only contain letters, numbers and underscores, and begin with underscores or letters",
        "argList": "op_name,kernel_name"
    },
    {
        "errCode": "E60035",
        "errMessage": "The op [%s] does not support this fusion mode",
        "argList": "op_name"
    },
    {
        "errCode": "E60115",
        "errMessage": "The op [%s] get illegal tiling parameter",
        "argList": "op_name"
    },
    {
        "errCode": "E60116",
        "errMessage": "tiling query has rule: %s",
        "argList": "rule_desc"
    },
    {
        "errCode": "E60117",
        "errMessage": "Failed to generate solution space, because of %s",
        "argList": "cause_desc"
    },
    {
        "errCode": "E60118",
        "errMessage": "Invalid platform,only support [%s]",
        "argList": "platform_desc"
    },
    {
        "errCode": "E60119",
        "errMessage": "In op[%s], Input is too large, the minimum tiling may exceed UB_Buffer",
        "argList": "op_name"
    },
    {
        "errCode": "E61000",
        "errMessage": "In op [%s], [%s] should be 4d list",
        "argList": "op_name,param_name"
    },
    {
        "errCode": "E61001",
        "errMessage": "In op [%s], [%s]",
        "argList": "op_name,reason"
    },
    {
        "errCode": "E61203",
        "errMessage": "In op [%s], [%s] , actual is [%s] and [%s]",
        "argList": "op_name,sence_params,param_1,param_2"
    },
    {
        "errCode": "E61204",
        "errMessage": "In op [%s], [%s] , actual is [%s]",
        "argList": "op_name,sence_params,param_1"
    },
    {
        "errCode": "E61205",
        "errMessage": "In op[%s], [%s]",
        "argList": "op_name,reason"
    },
    {
        "errCode": "E61300",
        "errMessage": "In op [%s], [%s] must be [%s] [%s]",
        "argList": "op_name,param_name,expect_value,condition"
    },
    {
        "errCode": "E61301",
        "errMessage": "In op [%s], [%s] must be equal to [%s]",
        "argList": "op_name,param_name_1,param_name_2"
    },
    {
        "errCode": "E61500",
        "errMessage": "In op [%s], input_memory_type should be 0 or 1 or 2, actual is [%s]",
        "argList": "op_name,input_memory_type"
    },
    {
        "errCode": "E61501",
        "errMessage": "In op [%s], output_memory_type should be 0 or 1 or 2, actual [%s]",
        "argList": "op_name,output_memory_type"
    },
    {
        "errCode": "E61600",
        "errMessage": "In op [%s] param [%s] must > 0",
        "argList": "op_name, param"
    },
    {
        "errCode": "E61601",
        "errMessage": "In op [%s], if it is the [%s] cut shape, the [%s] must be [%s]",
        "argList": "op_name,scene,param_name,claim"
    },
    {
        "errCode": "E61602",
        "errMessage": "In op [%s] input parameter [%s] should be [%s] type, but the type you enter is [%s]",
        "argList": "op_name, param_name, optype_1, optype_2"
    },
    {
        "errCode": "E61603",
        "errMessage": "In op [%s] [%s] must equal to [%s]",
        "argList": "op_name, optype_1, optype_2"
    },
    {
        "errCode": "E62001",
        "errMessage": "In op[%s],dilation_h, dilation_w and dilation_d must be 1,actual are [%s], [%s] and  [%s].",
        "argList": "op_name,para1,para2,para3"
    },
    {
        "errCode": "E62002",
        "errMessage": "In op[%s], the type and dim of [%s] must be  [%s] and [%s], actual they are  [%s] and [%s] respectively.",
        "argList": "op_name,param_name,expected_type,expected_length,type,length"
    },
    {
        "errCode": "E62003",
        "errMessage": "In op[%s], the size of [%s] on [%s] dimension should be in range [%s], but it is [%s].",
        "argList": "op_name,para1,para2,para3,para4"
    },
    {
        "errCode": "E62004",
        "errMessage": "In op[%s],filter D must > Pad D, actual they are [%s] and [%s].",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62005",
        "errMessage": "In op[%s], x D(after pad) must >= stride D, actual they are [%s] and [%s].",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62006",
        "errMessage": "In op[%s],[%s].",
        "argList": "op_name,para1"
    },
    {
        "errCode": "E62301",
        "errMessage": "In op[%s], the second value of BL1_shape should be a factor of  the block num, actual input is [%s].",
        "argList": "op_name,para1"
    },
    {
        "errCode": "E62302",
        "errMessage": "In op[%s], the second value of BL1_shape should be even number, but actually it is [%s].",
        "argList": "op_name,para1"
    },
    {
        "errCode": "E62303",
        "errMessage": "In op[%s], the value of AL1_shape & BL1_shape are  not reasonable, which are [%s] and [%s].",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62304",
        "errMessage": "In op[%s], the dim of [%s] should be [%s], but it is  [%s].",
        "argList": "op_name,para1,para2,para3"
    },
    {
        "errCode": "E62305",
        "errMessage": "In op[%s], the value of [%s] should be [%s], but it is  [%s].",
        "argList": "op_name,param_name,expect_value,value"
    },
    {
        "errCode": "E62306",
        "errMessage": "In op[%s], [%s].",
        "argList": "op_name,para1"
    },
    {
        "errCode": "E62501",
        "errMessage": "In op[%s], [%s] should be 6d list.",
        "argList": "op_name,para1"
    },
    {
        "errCode": "E62502",
        "errMessage": "In op[%s], there is a division by zero operation during calculating, the oprands are [%s] and [%s]. ",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62503",
        "errMessage": "In op[%s], the  Fmap's batch must be equal to the batch in backpropagation, it should be [%s], but actually it is [%s].",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62504",
        "errMessage": "In op[%s], the  Dedy's channel must be equal to the Filter's batch in backpropagation, it should be [%s], but actually it is [%s].",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62505",
        "errMessage": "In op[%s], the  input's channel must be equal to the Filter's batch in backpropagation, it should be [%s], but actually it is [%s].",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62506",
        "errMessage": "In op[%s], the  Dedy's channel must be equal to the Filter's channel in backpropagation, it should be [%s], but actually it is [%s].",
        "argList": "op_name,para1,para2"
    },
    {
        "errCode": "E62507",
        "errMessage": "In op[%s], the [%s] dim of Filter(after dilation) must be less than the corresponding dim of input(after padding), they are [%s] and [%s].",
        "argList": "op_name,para1,para2,para3"
    },
    {
        "errCode": "E62508",
        "errMessage": "In op[%s], Shape error : The compute result of D under convolution rule cannot match.",
        "argList": "op_name"
    },
    {
        "errCode": "E62509",
        "errMessage": "In op[%s], the type of axis of [%s] must be positive int.",
        "argList": "op_name,para1"
    },
    {
        "errCode": "E62510",
        "errMessage": "In op[%s], Dilations in the batch and channel dimensions must be 1.",
        "argList": "op_name"
    },
    {
        "errCode": "E62511",
        "errMessage": "In op[%s], C0 must be 16, but actually it is [%s].",
        "argList": "op_name,para1"
    },
    {
        "errCode": "E62512",
        "errMessage": "In op[%s], n dimension of input should be int, but actually it is [%s].",
        "argList": "op_name, para1"
    },
    {
        "errCode": "E62513",
        "errMessage": "In op[%s], m dimension of [%s] should be [%s], but actually it is [%s].",
        "argList": "op_name, param_name, expect_value, actual_value"
    },
    {
        "errCode": "E62514",
        "errMessage": "In op[%s], n dimension of inputs should be consistent.",
        "argList": "op_name"
    },
    {
        "errCode": "E62515",
        "errMessage": "In op[%s], dimension of inputs should be [%s].",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E62516",
        "errMessage": "In op[%s], dtype of inputs should be [%s].",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E62517",
        "errMessage": "In op[%s], dtype of inputs should be [%s] and [%s].",
        "argList": "op_name, param1, param2"
    },
    {
        "errCode": "E62518",
        "errMessage": "In op[%s], the third and forth dimension must be [%s].",
        "argList": "op_name, param_name"
    },
    {
        "errCode": "E62519",
        "errMessage": "In op[%s], the dst shape's H and W must be [%s].",
        "argList": "op_name, value"
    },
    {
        "errCode": "E62520",
        "errMessage": "In op[%s], the dst shape's N must be divide by [%s].",
        "argList": "op_name, value"
    },
    {
        "errCode": "E62521",
        "errMessage": "In op[%s], the src and dst must be [%s] dimension.",
        "argList": "op_name, value"
    },
    {
        "errCode": "E62522",
        "errMessage": "In op[%s], the src and dst is wrong.",
        "argList": "op_name, value"
    },
    {
        "errCode": "E62523",
        "errMessage": "In op[%s], [%s] should be less than [%s], actual is [%s].",
        "argList": "op_name, para1, para2, para3"
    },
    {
        "errCode": "E62524",
        "errMessage": "In op[%s], [%s] should be equal with [%s], actual is [%s].",
        "argList": "op_name, para1, para2, para3"
    },
    {
        "errCode": "E64001",
        "errMessage": "In op[%s], the [%s] must be int and in range [%s], actual is [%s]",
        "argList": "op_name,attr_name, range, value"
    },
    {
        "errCode": "E64002",
        "errMessage": "In op[%s], [%s] must be equal to [%s], while the input of them are [%s]",
        "argList": "op_name, param1, param2, actual_value"
    },
    {
        "errCode": "E64003",
        "errMessage": "In op[%s], shape format of [%s] must be [%s], and the dim is [%s], actual the dim is [%s]",
        "argList": "op_name, param_name, format, expect_dim, dim"
    },
    {
        "errCode": "E64004",
        "errMessage": "In op[%s], The type of axis of [%s] must be [%s], actual the [%s]ed axis is [%s]",
        "argList": "op_name, param_name, axis_rule, wrong_axis, actual_value"
    },
    {
        "errCode": "E64005",
        "errMessage": "In op[%s], pads must less than filter In [%s], actual input of [%s] are [%s] while filter is [%s]",
        "argList": "op_name, direction, pads_dir, pads_value, filter_value "
    },
    {
        "errCode": "E64006",
        "errMessage": "In tiling of op [%s], k of [%s] must be integral multiply of [%s], actual are [%s] and [%s]",
        "argList": "op_name, param_1, param_2, value_1, value_2"
    },
    {
        "errCode": "E64007",
        "errMessage": "In tiling of op [%s], [%s] of L1 must be integral multiply of L0, that mean [%s] must >=1, actual it is [%s]",
        "argList": "op_name, axis_name, param_name, param_value"
    },
    {
        "errCode": "E64008",
        "errMessage": "In tiling of op [%s], [%s] of [%s] and [%s] must be same, actual they are [%s] and [%s]",
        "argList": "op_name, axis_name, param_1, param_2, value_1, value_2"
    },
    {
        "errCode": "E64009",
        "errMessage": "In tiling of op [%s], it has rules: CUB_matrix[1] = CL0_matrix[1], CUB_matrix[0] is a factor of CL0_matrix[0]",
        "argList": "op_name"
    },
    {
        "errCode": "E64010",
        "errMessage": "In tiling of op [%s], value of [%s] can only be 1 or 2, while the value is [%s]",
        "argList": "op_name, buffer_name, value"
    },
    {
        "errCode": "E65001",
        "errMessage": "In op [%s], The type of axis of [%s] must be [%s], actual the [%s]ed axis is [%s]",
        "argList": "op_name, param_name, axis_rule, wrong_axis, actual_value"
    },
    {
        "errCode": "E65002",
        "errMessage": "In op [%s], the dtype of [%s] and [%s] must be equal",
        "argList": "op_name, param_1, param_2"
    },
    {
        "errCode": "E65003",
        "errMessage": "In op[%s], shape format of [%s] must be [%s], and the dim is [%s], actual the dim is [%s]",
        "argList": "op_name, param_name, format, expect_dim, dim"
    },
    {
        "errCode": "E65004",
        "errMessage": "In op[%s], deconvolution not support offset_w now.",
        "argList": "op_name"
    },
    {
        "errCode": "E65005",
        "errMessage": "In op[%s], [%s] must <= [%s]",
        "argList": "op_name, param_1, param_2"
    },
    {
        "errCode": "E65006",
        "errMessage": "In op[%s], the [%s] must be int and  in range [%s], actual is [%s]",
        "argList": "op_name, attr_name, range, value"
    },
    {
        "errCode": "E65007",
        "errMessage": "In op[%s], [%s] must be equal to [%s], while the input of them are [%s]",
        "argList": "op_name, param1, param2, actual_value"
    },
    {
        "errCode": "E65008",
        "errMessage": "In op [%s], input_memory_type should be [%s], actual is [%s]",
        "argList": "op_name, input_memory_type_range, input_memory_type"
    },
    {
        "errCode": "E65009",
        "errMessage": "In op [%s], output_memory_type should be [%s], actual is [%s]",
        "argList": "op_name, output_memory_type_range, output_memory_type"
    },
    {
      "errCode": "E67001",
      "errMessage": "op [%s] is not surport op.tag [%s]",
      "argList": "op_name,tag"
    },
    {
      "errCode": "E67002",
      "errMessage": "op [%s] only surport [%s] == [%s] and [%s] ==  [%s], but scale  [%s], sqrt  [%s]",
      "argList": "op_name, param_name_1, expect_param1_value, param_name_2, expect_param2_value, param1_value, param2_value"
    },
    {
      "errCode": "E67003",
      "errMessage": " op [%s], the value of  [%s] is not reasonable",
      "argList": "op_name, param_name"
    },
    {
      "errCode": "E67004",
      "errMessage": "In op[%s], the value of BL1_shape are not reasonable, which are [%s].",
      "argList": "op_name, BL1_shape"
    },
    {
      "errCode": "E67005",
      "errMessage": "In op[%s], the value of tile_hd are not reasonable, which are [%s].",
      "argList": "op_name,tile_hd"
    },
    {
      "errCode": "E67006",
      "errMessage": "In op[%s], the value of [%s] is not equal to 0.",
      "argList": "op_name, param_name"
    },
    {
      "errCode": "E67007",
      "errMessage": "In op[%s], the value of [%s] must be equal to 1",
      "argList": "op_name, param_name"
    },
    {
      "errCode": "E67008",
      "errMessage": "In op[%s],  the value of [%s] must be greater than 0",
      "argList": "op_name, param_name"
    },
    {
      "errCode": "E67009",
      "errMessage": "In op[%s], apply buffers failed!",
      "argList": "op_name"
    },
    {
      "errCode": "E67010",
      "errMessage": "In op[%s], trans_depthwise_weight_6d_2_4d only support 6D shape of [%s]",
      "argList": "op_name, param_name"
    },
    {
      "errCode": "E67011",
      "errMessage": "In op[%s], [%s] of input_shape must be 16.",
      "argList": "op_name, param_name"
    },
    {
      "errCode": "E67012",
      "errMessage": "In op[%s], ceil([%s] / [%s]) must be equal to [%s].",
      "argList": "op_name, param_name1, param_name2, param_name3"
    },
    {
      "errCode": "E67013",
      "errMessage": "In op[%s], [%s] must be [%s], but [%s].",
      "argList": "op_name, param_name,expect_format,real_format"
    },
    {
      "errCode": "E67014",
      "errMessage": "In op[%s], the shape of src and dst not match, the 1st,2rd,dimension of shape must be the same !",
      "argList": "op_name"
    },
    {
      "errCode": "E67015",
      "errMessage": "In op[%s], trans_depthwise_weight_4d_2_6d only support 4D shape of [%s]",
      "argList": "op_name, param_name"
    },
    {
      "errCode": "E67016",
      "errMessage": "In op[%s], the lower range of [%s]'s [%s] must greater than 0, the upper range must greater or equal to lower range, actual is [%s]",
      "argList": "op_name, attr_name, value"
    },
    {
      "errCode": "E67017",
      "errMessage": "In op[%s], [%s] only support [%s].",
      "argList": "op_name, param_name1, param_name2"
    },
    {
      "errCode": "E67018",
      "errMessage": "In op[%s], [%s] should be  [%s], actual is [%s].",
      "argList": "op_name, param_name1, param_name2, param_name3"
    },
    {
      "errCode": "E80000",
      "errMessage": "In op[%s], the parameter[%s] should be [%s], but actually is [%s].",
      "argList": "op_name,param_name,expected_value,real_value"
    },
    {
      "errCode": "E80001",
      "errMessage": "In op[%s], the mandatory parameter[%s] is missed.",
      "argList": "op_name,param_name"
    },
    {
      "errCode": "E80002",
      "errMessage": "In op[%s], the parameter[%s] should be in the range of [%s, %s], but actually is [%s].",
      "argList": "op_name,param_name,min_value,max_value,value"
    },
    {
      "errCode": "E80003",
      "errMessage": "In op[%s], the parameter[%s]'s type should be [%s],  but actually is [%s].",
      "argList": "op_name,param_name,param_type,actual_type"
    },
    {
      "errCode": "E80004",
      "errMessage": "In op[%s], the input[%s] does not contain the item[%s].",
      "argList": "op_name,param_name,key"
    },
    {
      "errCode": "E80005",
      "errMessage": "In op[%s], the length of parameter[%s] be in the range of [%s, %s], but actually is [%s].",
      "argList": "op_name,param_name,min_len,max_len,length"
    },
    {
      "errCode": "E80006",
      "errMessage": "In op[%s], the input[%s]'s dtype should be one of [%s], but actually is [%s].",
      "argList": "op_name,tensor_name,excepted_dtype_list,dtype"
    },
    {
      "errCode": "E80007",
      "errMessage": "In op[%s], the input[%s]'s dtype could not be none.",
      "argList": "op_name,param_name"
    },
    {
      "errCode": "E80008",
      "errMessage": "In op[%s], the parameter[%s]'s dtype should be one of [%s], but actually is [%s].",
      "argList": "op_name,param_name,excepted_dtype_list,dtype"
    },
    {
      "errCode": "E80009",
      "errMessage": "Op[%s] has rule: %s, but [%s] is [%s].",
      "argList": "op_name,rule_desc,param_name,param_value"
    },
    {
      "errCode": "E80010",
      "errMessage": "In op[%s], the shape of tensor[%s] must be list or tuple, but actually is [%s].",
      "argList": "op_name,tensor_name,shape_type"
    },
    {
      "errCode": "E80011",
      "errMessage": "In op[%s], the shape size(product of all dimensions) of input[%s] should more than [%s], but actually is [%s].",
      "argList": "op_name,input_name,min_value,real_value"
    },
    {
      "errCode": "E80012",
      "errMessage": "In op[%s], the num of dimensions of input[%s] should be in the range of [%s, %s], but actually is [%s].",
      "argList": "op_name,param_name,min_value,max_value,real_value"
    },
    {
      "errCode": "E80013",
      "errMessage": "In op[%s], the inputs[%s][%s] could not be broadcast together with shapes[%s][%s].",
      "argList": "op_name,input1_name,input2_name,input1_shape,input2_shape"
    },
    {
      "errCode": "E80014",
      "errMessage": "In op[%s], the original format of input[%s] should be one of [%s], but actually is [%s].",
      "argList": "op_name,param_name,excepted_format_list,format"
    },
    {
      "errCode": "E80015",
      "errMessage": "In op[%s], the format of input[%s] should be one of [%s], but actually is [%s].",
      "argList": "op_name,param_name,excepted_format_list,format"
    },
    {
      "errCode": "E80016",
      "errMessage": "In op[%s], the output[%s]'s type should be one of [%s],  but actually is [%s].",
      "argList": "op_name,output_name,expect_type_list,real_type"
    },
    {
      "errCode": "E80017",
      "errMessage": "In op[%s], the parameter[%s][%s] is not match with the parameter[%s][%s],it should be [%s].",
      "argList": "op_name,param_name1,param_name2,param1_shape,param2_shape,expect_shape"
    },
    {
      "errCode": "E80018",
      "errMessage": "In op[%s], the parameter[%s][%s] are not equal in dtype with dtype[%s][%s].",
      "argList": "op_name,param_name1,param_name2,param1_dtype,param2_dtype"
    },
    {
      "errCode": "E80019",
      "errMessage": "In op[%s], the parameter[%s][%s] are not equal in format with format[%s][%s].",
      "argList": "op_name,param_name1,param_name2,param1_format,param2_format"
    },
    {
      "errCode": "E80020",
      "errMessage": "In op[%s],kernel_name can only contain letters, numbers and underscores, and begin with underscores or letters",
      "argList": "op_name"
    },
    {
      "errCode": "E80021",
      "errMessage": "In op[%s], the length of shape[%s] and the length of range[%s] must be the same.",
      "argList": "op_name,shape_len,range_len"
    },
    {
      "errCode": "E80022",
      "errMessage": "In op[%s], the ndim of first range input[%s] is less than that of the second range input[%s], and the ndim of range should be in the range of [%s, %s].",
      "argList": "op_name,first_real_value,second_real_value,min_range_value,max_range_value"
    },
    {
      "errCode": "E80023",
      "errMessage": "In op[%s],the length of each element in the range must be two",
      "argList": "op_name"
    },
    {
      "errCode": "E80024",
      "errMessage": "In op[%s],the range at the same location must have intersections",
      "argList": "op_name"
    },
    {
      "errCode": "E80025",
      "errMessage": "In op[%s], unsupported expr: [%s]",
      "argList": "op_name,param_expr"
    },
    {
      "errCode": "E80026",
      "errMessage": "In op[%s], it is not mul expr: [%s]",
      "argList": "op_name,param_expr"
    },
    {
      "errCode": "E80027",
      "errMessage": "In op[%s], only support two inputs for broadcast",
      "argList": "op_name"
    },
    {
      "errCode": "E80028",
      "errMessage": "In op[%s], the shape of input[%s] is invalid, [%s].",
      "argList": "op_name,param_name,error_detail"
    },
    {
      "errCode": "E80029",
      "errMessage": "In op[%s], the shape of inputs[%s][%s] are invalid, [%s].",
      "argList": "op_name,param_name1,param_name2,error_detail"
    },
    {
      "errCode": "E80030",
      "errMessage": "In op[%s], the dtype of inputs[%s][%s] are invalid, [%s].",
      "argList": "op_name,param_name1,param_name2,error_detail"
    },
    {
      "errCode": "E80031",
      "errMessage": "In op[%s], the format of inputs[%s][%s] are invalid, [%s].",
      "argList": "op_name,param_name1,param_name2,error_detail"
    },
    {
      "errCode": "E81000",
      "errMessage": "In op[%s], parameter[local_size] is not right, but actually is [%s]",
      "argList": "op_name,real_local_size"
    },
    {
      "errCode": "E81001",
      "errMessage": "In op[LRN], the parameter[norm_region] only support ACROSS_CHANNEl mode, but actually is [%s].",
      "argList": "real_norm_region"
    },
    {
      "errCode": "E81002",
      "errMessage": "In op[Eltwise], the parameter[coeff]'s length[%s] should be equal to inputs' num[%s].",
      "argList": "coeff_length,input num "
    },
    {
      "errCode": "E81003",
      "errMessage": "In op[Eltwise], the shapes[%s] of inputs should be the same.",
      "argList": "shapes_list"
    },
    {
      "errCode": "E81004",
      "errMessage": "In op[Slice], the parameter[axis] and parameter[slice_dim] could not both exist.",
      "argList": "-"
    },
    {
      "errCode": "E81005",
      "errMessage": "In op[Slice], the parameter[slice_axis]'s value[%s] should be not less than parameter[num_axes]'s value[%s].",
      "argList": "real_slice_axis,real_num_axes"
    },
    {
      "errCode": "E81006",
      "errMessage": "In op[%s], Hi3796CV300ES is not supported while the [%s] of input is [%s].",
      "argList": "op_name,param_name,real_value"
    },
    {
      "errCode": "E81007",
      "errMessage": "In op[%s], the parameter [%s] must be greater than 0, but actually is [%s].",
      "argList": "op_name,param_name,real_value"
    },
    {
      "errCode": "E81008",
      "errMessage": "In op[%s], the parameter [%s] must be times of stride**2[%s], but actually is [%s].",
      "argList": "op_name,param_name,expect_value,real_value"
    },
    {
      "errCode": "E81009",
      "errMessage": "In op[%s], the batch of input x[%s] and rois[%s] must be equal.",
      "argList": "op_name,param_value1,param_value2"
    },
    {
      "errCode": "E81010",
      "errMessage": "In op[%s], the parameter %s is invalid, it should follow the rule: self.x_shape[1](%s)//self.y_shape[1](%s) == self.y_shape[2](%s)*self.y_shape[3](%s).",
      "argList": "op_name,param_name,param_value1,param_value2,param_value3,param_value4"
    },
    {
      "errCode": "E81011",
      "errMessage": "In op[%s], the parameter[%s] is invalid,it should follow the rule:(output_dim + C0 -1) // C0 == y_shape[1].",
      "argList": "op_name,param_name"
    },
    {
      "errCode": "E81012",
      "errMessage": "Compile op[aipp] failed, cause: %s.",
      "argList": "cause_desc"
    },
    {
      "errCode": "E90001",
      "errMessage": "Compile operator failed, cause: Parameters check failed, detailed information: %s.",
      "argList": "detailed_cause"
    },
    {
      "errCode": "E90002",
      "errMessage": "Compile operator failed, cause: The limitation of instruction, detailed information: %s.",
      "argList": "detailed_cause"
    },
    {
      "errCode": "E90003",
      "errMessage": "Compile operator failed, cause: Template constraint, detailed information: %s.",
      "argList": "detailed_cause"
    },
    {
      "errCode": "E68000",
      "errMessage": "the tiling_type is error, only support [%s], but tiling_type is [%s].",
      "argList": "expect_value,real_value"
    },
    {
      "errCode": "E68001",
      "errMessage": "info_dict should be dict, but the input type is [%s].",
      "argList": "real_value"
    },
    {
      "errCode": "E68002",
      "errMessage": "the keyword [%s] is missing in input params.",
      "argList": "keyword"
    },
    {
      "errCode": "E68003",
      "errMessage": "only support: [%s], but the input is [%s].",
      "argList": "expect_value,real_value"
    },
    {
      "errCode": "E68004",
      "errMessage": "the type of param is illegal, only support [%s], but the type of param is [%s].",
      "argList": "expect_value,real_value"
    },
    {
      "errCode": "E68005",
      "errMessage": "the length of param is illegal, only support [%s], but the length of param is [%s].",
      "argList": "expect_value,real_value"
    },
    {
      "errCode": "E68006",
      "errMessage": "the input param is illegal, don't support [%s], but the param is [%s].",
      "argList": "not_expect_value,real_value"
    },
    {
      "errCode": "E68007",
      "errMessage": "the input param is illegal, only support [%s], but the param is [%s].",
      "argList": "expect_value,real_value"
    },
    {
      "errCode": "E68008",
      "errMessage": "the fm_l1_valid_size must be 1/2, 3/4, 1 times fm_shape_size, but fm_l1_valid_size is [%s], fm_shape_size is [%s].",
      "argList": "fm_l1_valid_size,fm_shape_size"
    },
    {
      "errCode": "E68009",
      "errMessage": "when it is tuning tiling mode, illegal current input params is: [%s].",
      "argList": "current_value"
    },
    {
      "errCode": "E68010",
      "errMessage": "when it is tuning tiling mode, illegal previous input params is: [%s].",
      "argList": "previous_value"
    },
    {
      "errCode": "E68011",
      "errMessage": "tiling params is changed, previous input is [%s], current input is [%s].",
      "argList": "previous_value,current_value"
    },
    {
      "errCode": "E68012",
      "errMessage": "tiling mode is not tuning tiling, current is [%s].",
      "argList": "real_value"
    },
    {
      "errCode": "E68013",
      "errMessage": "only support legal tiling, but the return value of tiling is [%s].",
      "argList": "real_value"
    },
    {
      "errCode": "E68014",
      "errMessage": "the tiling_type is error, dynamic shape not support [%s].",
      "argList": "real_value"
    },
    {
      "errCode": "E68015",
      "errMessage": "only support [%s], but the type of return value is [%s].",
      "argList": "expect_value,real_value"
    },
    {
      "errCode": "E68016",
      "errMessage": "the environment path [%s] is not set or invalid, expect [%s].",
      "argList": "env_name,expect_value"
    },
    {
      "errCode": "E68017",
      "errMessage": "the [%s] model does not support [%s] type.",
      "argList": "tiling_model,tiling_type"
    },
    {
      "errCode": "E68050",
      "errMessage": "[%s] close failed.",
      "argList": "param_name"
    },
    {
      "errCode": "E68051",
      "errMessage": "[%s] should not be empty.",
      "argList": "param_name"
    },
    {
      "errCode": "E68052",
      "errMessage": "get function [%s] failed.",
      "argList": "param_name"
    },
    {
      "errCode": "E68053",
      "errMessage": "only support: [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68054",
      "errMessage": "[%s] plugin handler is NULL!",
      "argList": "param_name"
    },
    {
      "errCode": "E68055",
      "errMessage": "mode = [%s] is not found in [%s].",
      "argList": "mode_name,param_name"
    },
    {
      "errCode": "E68056",
      "errMessage": "platform flag [%s] is not supported.",
      "argList": "param_name"
    },
    {
      "errCode": "E68057",
      "errMessage": "not support costmodel query for platform flag [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68058",
      "errMessage": "not support costmodel query for opTag [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68059",
      "errMessage": "cannot find corresponding hardware platform name for platform flag [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68060",
      "errMessage": "cannot find corresponding op name for opTag [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68061",
      "errMessage": "not support repository query for platform flag [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68062",
      "errMessage": "not support repository query for opTag [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68063",
      "errMessage": "cannot find corresponding platform flag for platform [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68064",
      "errMessage": "CceConfBase::GetInstance Failed.",
      "argList": ""
    },
    {
      "errCode": "E68065",
      "errMessage": "cannot find corresponding loaded [%s].",
      "argList": "param_name"
    },
    {
      "errCode": "E68066",
      "errMessage": "current operation caused data overflow.",
      "argList": ""
    },
    {
      "errCode": "E68067",
      "errMessage": "tiling index [%s] should not be [%s].",
      "argList": "index_name,not_expect_value"
    },
    {
      "errCode": "E68068",
      "errMessage": "kAL1/kBL1 should be greater than 0 and less than or equal to l1buffer.",
      "argList": ""
    },
    {
      "errCode": "E68069",
      "errMessage": "[%s] should be less than or equal to [%s].",
      "argList": "param_name,threshhold"
    },
    {
      "errCode": "E68070",
      "errMessage": "size of [%s] should be greater than [%s].",
      "argList": "size_value,threshhold"
    },
    {
      "errCode": "E68071",
      "errMessage": "mDim is zero, illegal!",
      "argList": ""
    },
    {
      "errCode": "E68072",
      "errMessage": "divisor can not be zero!",
      "argList": ""
    },
    {
      "errCode": "E68073",
      "errMessage": "The keyword [%s] is not in [%s].",
      "argList": "key_name,param_name"
    },
    {
      "errCode": "E68074",
      "errMessage": "run function [%s] failed.",
      "argList": "param_name"
    },
    {
      "errCode": "E68075",
      "errMessage": "[%s] can not be zero.",
      "argList": "param_name"
    },
    {
      "errCode": "E68076",
      "errMessage": "value at index [%s] of [%s] can not be zero.",
      "argList": "index_name,param_name"
    },
    {
      "errCode": "E68077",
      "errMessage": "the length of all features not up to 46.",
      "argList": ""
    },
    {
      "errCode": "E68078",
      "errMessage": "size of index should be even.",
      "argList": ""
    },
    {
      "errCode": "E68079",
      "errMessage": "cost model close failed.",
      "argList": ""
    },
    {
      "errCode": "E68080",
      "errMessage": "cost model can not be NULL!",
      "argList": ""
    },
    {
      "errCode": "E68081",
      "errMessage": "doing [%s] node decompress fail.",
      "argList": "param_name"
    },
    {
      "errCode": "E68082",
      "errMessage": "the [%s] tree node can not be NULL!",
      "argList": "param_name"
    },
    {
      "errCode": "E68083",
      "errMessage": "repository is empty!",
      "argList": ""
    },
    {
      "errCode": "E68084",
      "errMessage": "the readable length of key and value of repository are not equal!",
      "argList": ""
    },
    {
      "errCode": "E68085",
      "errMessage": "current op can not be L1 fusion.",
      "argList": ""
    },
    {
      "errCode": "E68086",
      "errMessage": "current op can not be L1/L2 fusion.",
      "argList": ""
    },
    {
      "errCode": "E68087",
      "errMessage": "size of [%s] should be greater than or equal to [%s].",
      "argList": "size_value,threshhold"
    },
    {
      "errCode": "E68088",
      "errMessage": "[%s] open failed.",
      "argList": "param_name"
    },
    {
      "errCode": "E68089",
      "errMessage": "tiling is not found in repository file.",
      "argList": ""
    }
]
